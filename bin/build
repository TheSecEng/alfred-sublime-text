#!/usr/bin/env zsh

# Path to this script's directory (i.e. workflow root)
here="$( cd "$( dirname "$0" )"; pwd )"
root="$( cd "$here/../"; pwd )"
builddir="${root}/build"
distdir="${root}/dist"

source "${root}/alfredenv.sh"

verbose=false
devmode=true
runtests=false
force=false

# log <arg>... | Echo arguments to STDERR
log() {
  echo "$@" >&2
}

# info <arg>.. | Write args to STDERR if VERBOSE is true
info() {
  $verbose && log $(print -P "%F{blue}.. %f") "$@"
  return 0
}

# success <arg>.. | Write green "ok" and args to STDERR if VERBOSE is true
success() {
  $verbose && log $(print -P "%F{green}ok %f") "$@"
  return 0
}

# error <arg>.. | Write red "error" and args to STDERR
error() {
  log $(print -P '%F{red}err%f') "$@"
}

# fail <arg>.. | Write red "error" and args to STDERR, then exit with status 1
fail() {
  error "$@"
  exit 1
}

# cleanup | Delete build files
cleanup() {
  info "cleaning up ..."
  test -d "$builddir" && rm -rf $verbose "${builddir}/"*
}

# usage | Show usage message
usage() {
  cat <<EOS
build [-h] [-d] [-t] [-f] [-v]

Build workflow in ./build directory from source code.
Use -d to also build an .alfredworkflow file in ./dist.

Usage:
    build [-d] [-t] [-f] [-v]
    build -h

Options:
    -d     Distribution. Also build .alfredworkflow file.
    -f     Force. Overwrite existing files.
    -t     Also run unit tests.
    -h     Show this message and exit.
    -v     Verbose.
EOS
}

# -------------------------------------------------------
# CLI options
while getopts ":dfhtv" opt; do
  case $opt in
    d)
      devmode=false
      ;;
    f)
      force=true
      ;;
    h)
      usage
      exit 0
      ;;
    t)
      runtests=true
      ;;
    v)
      verbose=true
      ;;
    \?)
      log "Invalid option: -$OPTARG"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

test -z "$root" && fatal "couldn't find workflow directory"

$verbose && v=-v

pushd "$root" &> /dev/null
# -------------------------------------------------------
# Run unit tests
$runtests && {
  info "running unit tests ..."
  go test $v . || exit 1
  success "unit tests"
}

# -------------------------------------------------------
# Build
test -d "${builddir}" && {
  info "cleaning build directory ..."
  cleanup
  success "cleaned build"
}

info "building executable(s) ..."

go build $v -o ./alfsubl .

# $devmode && { sym="-s" }

info "linking assets to build directory ..."
# mkdir -vp "$builddir"
# mkdir -p $v "${builddir}/scripts/"{tab,url}
mkdir -p $v "${builddir}/icons"

pushd "$builddir" &> /dev/null

ln $v ../*.html .
ln $v ../info.plist .
ln $v ../icons/icon.png .
ln $v ../alfsubl .
ln $v ../README.md .
ln $v ../LICENCE.txt .
ln $v ../icons/*.png ./icons/
# ln $v scripts/tab/* "${builddir}/scripts/tab/"
# ln $v scripts/url/* "${builddir}/scripts/url/"
popd &> /dev/null

# -------------------------------------------------------
# Build .alfredworkflow file
$devmode || {
  test -f "${outpath}" && {
    $force && {
      rm $v "${outpath}"
    } || {
      fatal "destination file already exists (use --force to overwrite)"
    }
  }

  test -d "$distdir" || mkdir -p "$distdir"

  info "building .alfredworkflow file ..."

  zipname="Google-Calendar-View-${alfred_workflow_version}.alfredworkflow"
  outpath="${distdir}/${zipname}"

  pushd "$builddir" &> /dev/null

  zip -9 -r "${outpath}" ./*
  ST_ZIP=$?
  test "$ST_ZIP" -ne 0 && {
    error "zip failed (${ST_ZIP}) while creating .alfredworkflow file."
    popd &> /dev/null
    popd &> /dev/null
    exit $ST_ZIP
  }

  popd &> /dev/null
  success "wrote '${zipname}' file in '${distdir}'"
}

popd &> /dev/null
